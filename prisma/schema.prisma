generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id          String        @id @default(cuid())
  firstName   String        @map("first_name")
  lastName    String?       @map("last_name")
  email       String        @unique
  phone       String?       @unique
  avatar      String?
  country     String?
  city        String?
  password    String
  role        String?       @default("admin")
  status      String?       @default("active")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  shops       Shop?         @relation("_users_shop")
  blogPosts   blogPost[]
  UserComment UserComment[]

  @@map("users")
}

model Shop {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  userId      String    @unique @map("user_id")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation("_users_shop", fields: [userId], references: [id])
  products    Product[] @relation("_users_shop_products")

  @@index([userId])
  @@map("shops")
}

model ProductCategory {
  id            Int               @id @default(autoincrement())
  name          String
  perentId      Int?              @map("perent_id")
  perent        ProductCategory?  @relation("PerentCategoryToPerent", fields: [perentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subCategories ProductCategory[] @relation("PerentCategoryToPerent")
  Product       Product[]

  @@index([perentId])
  @@map("product_categories")
}

model Media {
  id        Int      @id @default(autoincrement())
  title     String
  url       String
  createdAt DateTime @map("created_at")
  updatedAt DateTime @map("updated_at")

  @@map("media")
}

model Product {
  id          Int             @id @default(autoincrement())
  name        String
  description String
  price       Float
  quantity    Int
  image       String
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  categoryId  Int             @map("category_id")
  shopId      Int
  category    ProductCategory @relation(fields: [categoryId], references: [id])
  shop        Shop            @relation("_users_shop_products", fields: [shopId], references: [id])
  orders      Order[]         @relation("_products_orders")

  @@index([shopId])
  @@index([categoryId])
  @@map("products")
}

model Order {
  id        String   @id @default(cuid())
  quantity  Int
  price     Float
  status    String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  productId Int
  product   Product  @relation("_products_orders", fields: [productId], references: [id])

  @@index([productId])
  @@map("orders")
}

model postCategory {
  id         Int      @id @default(autoincrement())
  blogPostId String
  categoryId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  blogPost   blogPost @relation(fields: [blogPostId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@index([blogPostId])
  @@index([categoryId])
  @@map("post_categories")
}

model blogPost {
  id         String         @id @default(cuid())
  title      String
  content    String         @db.LongText
  coverImage String?
  published  Boolean?       @default(false)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  userId     String         @map("user_id")
  tagId      Int            @map("tag_id")
  slug       String?        @unique
  user       User           @relation(fields: [userId], references: [id])
  categories postCategory[]
  tag        Tag            @relation(fields: [tagId], references: [id])
  comments   UserComment[]
  analytics  Analytics?
  metadata   Metadata?

  @@index([slug])
  @@index([userId])
  @@index([tagId])
  @@map("blog_posts")
}

model Category {
  id        String         @id @default(cuid())
  name      String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  posts     postCategory[]

  @@map("categories")
}

model Tag {
  id        Int        @id @default(autoincrement())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  blogPosts blogPost[]

  @@map("tags")
}

model UserComment {
  id         Int      @id @default(autoincrement())
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  blogPostId String   @map("blog_post_id")
  user       User     @relation(fields: [userId], references: [id])
  blogPost   blogPost @relation(fields: [blogPostId], references: [id])

  @@index([userId])
  @@index([blogPostId])
  @@map("user_comments")
}

model Analytics {
  id         Int      @id @default(autoincrement())
  views      Int
  likes      Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  blogPostId String   @unique @map("blog_post_id")
  blogPost   blogPost @relation(fields: [blogPostId], references: [id])

  @@index([blogPostId])
  @@map("analytics")
}

model Metadata {
  id         Int      @id @default(autoincrement())
  key        String
  value      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  blogPostId String   @unique @map("blog_post_id")
  blogPost   blogPost @relation(fields: [blogPostId], references: [id])

  @@index([blogPostId])
  @@map("metadata")
}
