generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}
model User {
  id         String        @id @default(cuid())
  firstName   String        @map("first_name")
  lastName    String?       @map("last_name")
  email       String        @unique
  username    String?       @unique
  bio         String?
  avatar      String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  posts      Post[]      
  comments   Comment[]    

  @@map("users")
}

// Post model
model Post {
  id         String        @id @default(cuid())
  title      String
  content    String        @db.Text
  coverImage String?
  published  Boolean?      @default(false)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  userId    String         @map("user_id")
  slug       String?       @unique
  author    User           @relation(fields: [userId], references: [id])
  category  Category[]     @relation("PostToCategory", onDelete: SetNull, onUpdate: Cascade)      
  tags       Tag[]         @relation("PostToTag", onDelete: Cascade, onUpdate: Cascade)
  comments   Comment[]     @relation("PostToComment", onDelete: Cascade, onUpdate: NoAction)
  analytics  PostAnalytics?

  @@index([slug])
  @@index([userId])
  @@map("posts")
}

// Category model
model Category {
  id        String        @id @default(cuid())
  name      String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  postsId   String?       @map("posts_id")
  posts     Post[]      @relation(fields: [postsId], onDelete: Cascade, onUpdate: Cascade)

  @@map("categories")
}

// Tag model
model Tag {
  id        String        @id @default(cuid())
  name      String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  posts     Post[]      @relation("PostToTag", references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@map("tags")
}

// Comment model
model Comment {
  id         Int         @id @default(autoincrement())
  content    String      @db.Text
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  userId    String       @map("user_id")
  postId    String       @map("post_id")
  user      User         @relation(fields: [userId], references: [id])
  post      Post        @relation(fields: [postId], references: [id])

  @@index([userId])
  @@index([postId])
  @@map("comments")
}

// Like model (optional)
model Like {
  id         Int         @id @default(autoincrement())
  userId    String       @map("user_id")
  postId    String       @map("post_id")
  user      User         @relation(fields: [userId], references: [id])
  post      Post        @relation(fields: [postId], references: [id])

  @@index([userId])
  @@index([postId])
  @@map("likes")
}

// Post Analytics model
model PostAnalytics {
  id         Int         @id @default(autoincrement())
  views      Int
  likes      Int
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  postId    String       @unique @map("post_id")
  post      Post        @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([postId])
  @@map("post_analytics")
}