// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String   @id @default(cuid())
  firstName String   @map("first_name")
  lastName  String?  @map("last_name")
  email     String   @unique
  phone     String?  @unique
  avatar    String?
  country   String?
  city      String?
  password  String
  role      String?  @default("seller")
  status    String?  @default("active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  shops       Shop?         @relation("_users_shop")
  blogPosts   blogPost[]
  UserComment UserComment[]

  @@map(name: "users")
}

model Shop {
  id          String @id @default(cuid())
  name        String
  description String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  products Product[] @relation("_users_shop_products")
  user     User      @relation("_users_shop", fields: [userId], references: [id])
  userId   String    @unique @map("user_id")

  @@index([userId])
  @@map(name: "shops")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Float
  category    String
  quantity    Int
  image       String
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")

  shopId String @map("shop_id")
  shop   Shop   @relation("_users_shop_products", fields: [shopId], references: [id])

  orders Order[] @relation("_products_orders")

  @@index([shopId, name])
  @@map(name: "products")
}

model Order {
  id        String   @id @default(cuid())
  quantity  Int
  price     Float
  status    String   @default("pending")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  productId Int
  product   Product @relation("_products_orders", fields: [productId], references: [id])

  @@index([productId])
  @@map(name: "orders")
}

model blogPost {
  id         String         @id @default(cuid())
  title      String
  content    String         @db.LongText
  published  Boolean        @default(false)
  createdAt  DateTime       @default(now()) @map(name: "created_at")
  updatedAt  DateTime       @updatedAt @map(name: "updated_at")
  tagId      String         @map("tag_id")
  tag        Tag            @relation(fields: [tagId], references: [id])
  userId     String         @map("user_id")
  user       User           @relation(fields: [userId], references: [id])
  categories postCategory[]
  comments   UserComment[]
  analytics  Analytics?
  metadatas  Metadata[]
  slug       String?        @unique

  @@index([userId])
  @@index([tagId])
  @@map(name: "blog_posts")
}

model Category {
  id        String         @id @default(cuid())
  name      String
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @updatedAt @map("updated_at")
  blogPosts postCategory[]

  @@map(name: "categories")
}

model postCategory {
  id         String   @id @default(cuid())
  blogPostId String   @map("blog_post_id")
  blogPost   blogPost @relation(fields: [blogPostId], references: [id])
  categoryId String   @map("category_id")
  category   Category @relation(fields: [categoryId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([blogPostId])
  @@index([categoryId])
  @@map(name: "post_categories")
}

model Tag {
  id        String     @id @default(cuid())
  name      String
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  blogPosts blogPost[]
}

model UserComment {
  id        Int      @id @default(autoincrement())
  content   String   @db.MediumText
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  blogPostId String   @map("blog_post_id")
  blogPost   blogPost @relation(fields: [blogPostId], references: [id])

  @@index([userId])
  @@index([blogPostId])
  @@map(name: "user_comments")
}

model Analytics {
  id         String   @id @default(cuid())
  views      Int
  likes      Int
  blogPostId String  @unique  @map("blog_post_id")
  blogPost   blogPost @relation(fields: [blogPostId], references: [id])
}

model Metadata {
  id         String   @id @default(cuid())
  key        String
  value      String
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  blogPostId String   @unique @map("blog_post_id")
  blogPost   blogPost @relation(fields: [blogPostId], references: [id])

  @@index([blogPostId])
  @@map(name: "metadata")
}
