// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String   @id @default(cuid())
  firstname String   @map("first_name")
  lastname  String?  @map("last_name")
  email     String   @unique
  phone     String?   @unique
  avatar    String?
  country   String?
  city      String?
  password  String
  role      String?   @default("seller")
  status    String?   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  shops     Shop?    @relation("_users_shop")
  blogPosts blogPost[]
  UserComment UserComment[]

  @@map(name: "users")
}


model Shop {
  id      String @id @default(cuid())
  name        String
  description String

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  products Product[]  @relation("_users_shop_products")
  user        User       @relation("_users_shop",fields: [userId], references: [id])
  userId      String        @unique

  @@map(name: "shops")
  @@index([userId])
}

model Product {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  price       Float
  category    String
  quantity    Int
  image       String
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")

  shopId String
  shop   Shop    @relation("_users_shop_products", fields: [shopId], references: [id])

  orders Order[] @relation("_products_orders")

  @@map(name: "products")
  @@index([shopId])
}

model Order {
  id        String   @id @default(cuid())
  quantity  Int
  price     Float
  status    String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  productId Int
  product   Product @relation("_products_orders", fields: [productId], references: [id])

  @@map(name: "orders")
  @@index([productId])
}

model blogPost {
  id        String        @id @default(cuid())
  title     String
  content   String
  published Boolean?   @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  categories Category[]
  tags       Tag[]
  comments   UserComment[]
  analytics  Analytics? 
  metadata   Metadata?
  slug       String?   @unique

  @@map(name: "blog_posts")
  @@index([userId])
}

model Category {
  id        Int        @id @default(autoincrement())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  blogPosts blogPost[]
}

model Tag {
  id        Int        @id @default(autoincrement())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  blogPosts blogPost[]
}

model UserComment {
  id        Int        @id @default(autoincrement())
  content   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    String
  user      User       @relation(fields: [userId], references: [id])

  blogPostId String
  blogPost  blogPost   @relation(fields: [blogPostId], references: [id])

  @@map(name: "user_comments")
  @@index([userId])
  @@index([blogPostId])
}

model Analytics {
  id        Int        @id @default(autoincrement())
  views     Int
  likes     Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  blogPostId String    @unique
  blogPost  blogPost   @relation(fields: [blogPostId], references: [id])
}

model Metadata {
  id        Int        @id @default(autoincrement())
  key       String
  value     String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  blogPostId String    @unique
  blogPost  blogPost   @relation(fields: [blogPostId], references: [id])

  @@map(name: "metadata")
  @@index([blogPostId])
}
